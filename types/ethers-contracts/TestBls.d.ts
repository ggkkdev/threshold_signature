/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestBlsInterface extends ethers.utils.Interface {
  functions: {
    "_expandMsg(bytes,bytes)": FunctionFragment;
    "_hashToField(bytes,bytes)": FunctionFragment;
    "_hashToPoint(bytes,bytes)": FunctionFragment;
    "_inverse(uint256)": FunctionFragment;
    "_inverseFaster(uint256)": FunctionFragment;
    "_isNonResidueFP(uint256)": FunctionFragment;
    "_isNonResidueFP2(uint256[2])": FunctionFragment;
    "_isOnCurveG1(uint256[2])": FunctionFragment;
    "_isOnCurveG1Compressed(uint256)": FunctionFragment;
    "_isOnCurveG2(uint256[4])": FunctionFragment;
    "_isOnCurveG2Compressed(uint256[2])": FunctionFragment;
    "_isValidCompressedPublicKey(uint256[2])": FunctionFragment;
    "_isValidCompressedSignature(uint256)": FunctionFragment;
    "_mapToPointFT(uint256)": FunctionFragment;
    "_mapToPointTI(bytes32)": FunctionFragment;
    "_pubkeyToUncompresed(uint256[2],uint256[2])": FunctionFragment;
    "_signatureToUncompresed(uint256,uint256)": FunctionFragment;
    "_sqrt(uint256)": FunctionFragment;
    "_sqrtFaster(uint256)": FunctionFragment;
    "_verifyMultiple(uint256[2],uint256[4][],uint256[2][])": FunctionFragment;
    "_verifySingle(uint256[2],uint256[4],uint256[2])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_expandMsg",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_hashToField",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_hashToPoint",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_inverse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_inverseFaster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isNonResidueFP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isNonResidueFP2",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isOnCurveG1",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isOnCurveG1Compressed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isOnCurveG2",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isOnCurveG2Compressed",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isValidCompressedPublicKey",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isValidCompressedSignature",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_mapToPointFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_mapToPointTI",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_pubkeyToUncompresed",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_signatureToUncompresed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_sqrt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "_sqrtFaster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyMultiple",
    values: [BigNumberish[], BigNumberish[][], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifySingle",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "_expandMsg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hashToField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_hashToPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_inverse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_inverseFaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isNonResidueFP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isNonResidueFP2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isOnCurveG1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isOnCurveG1Compressed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isOnCurveG2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isOnCurveG2Compressed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isValidCompressedPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isValidCompressedSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_mapToPointFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_mapToPointTI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_pubkeyToUncompresed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_signatureToUncompresed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_sqrt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_sqrtFaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifyMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifySingle",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestBls extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestBlsInterface;

  functions: {
    _expandMsg(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_expandMsg(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _hashToField(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "_hashToField(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    _hashToPoint(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "_hashToPoint(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    _inverse(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "_inverse(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    _inverseFaster(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "_inverseFaster(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    _isNonResidueFP(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_isNonResidueFP(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _isNonResidueFP2(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_isNonResidueFP2(uint256[2])"(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _isOnCurveG1(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_isOnCurveG1(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _isOnCurveG1Compressed(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_isOnCurveG1Compressed(uint256)"(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _isOnCurveG2(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_isOnCurveG2(uint256[4])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _isOnCurveG2Compressed(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_isOnCurveG2Compressed(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _isValidCompressedPublicKey(
      compressed: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_isValidCompressedPublicKey(uint256[2])"(
      compressed: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _isValidCompressedSignature(
      compressed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_isValidCompressedSignature(uint256)"(
      compressed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _mapToPointFT(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      p: BigNumber[];
      0: BigNumber[];
    }>;

    "_mapToPointFT(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      p: BigNumber[];
      0: BigNumber[];
    }>;

    _mapToPointTI(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      p: BigNumber[];
      0: BigNumber[];
    }>;

    "_mapToPointTI(bytes32)"(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      p: BigNumber[];
      0: BigNumber[];
    }>;

    _pubkeyToUncompresed(
      compressed: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      uncompressed: BigNumber[];
      0: BigNumber[];
    }>;

    "_pubkeyToUncompresed(uint256[2],uint256[2])"(
      compressed: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      uncompressed: BigNumber[];
      0: BigNumber[];
    }>;

    _signatureToUncompresed(
      compressed: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      uncompressed: BigNumber[];
      0: BigNumber[];
    }>;

    "_signatureToUncompresed(uint256,uint256)"(
      compressed: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      uncompressed: BigNumber[];
      0: BigNumber[];
    }>;

    _sqrt(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "_sqrt(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    _sqrtFaster(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "_sqrtFaster(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    _verifyMultiple(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_verifyMultiple(uint256[2],uint256[4][],uint256[2][])"(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    _verifySingle(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "_verifySingle(uint256[2],uint256[4],uint256[2])"(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  _expandMsg(
    domain: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "_expandMsg(bytes,bytes)"(
    domain: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  _hashToField(
    domain: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "_hashToField(bytes,bytes)"(
    domain: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _hashToPoint(
    domain: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "_hashToPoint(bytes,bytes)"(
    domain: BytesLike,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _inverse(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "_inverse(uint256)"(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _inverseFaster(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_inverseFaster(uint256)"(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _isNonResidueFP(e: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "_isNonResidueFP(uint256)"(
    e: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isNonResidueFP2(
    e: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isNonResidueFP2(uint256[2])"(
    e: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isOnCurveG1(
    point: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isOnCurveG1(uint256[2])"(
    point: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isOnCurveG1Compressed(
    point: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isOnCurveG1Compressed(uint256)"(
    point: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isOnCurveG2(
    point: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isOnCurveG2(uint256[4])"(
    point: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isOnCurveG2Compressed(
    point: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isOnCurveG2Compressed(uint256[2])"(
    point: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isValidCompressedPublicKey(
    compressed: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isValidCompressedPublicKey(uint256[2])"(
    compressed: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isValidCompressedSignature(
    compressed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_isValidCompressedSignature(uint256)"(
    compressed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _mapToPointFT(
    e: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "_mapToPointFT(uint256)"(
    e: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _mapToPointTI(e: BytesLike, overrides?: CallOverrides): Promise<BigNumber[]>;

  "_mapToPointTI(bytes32)"(
    e: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _pubkeyToUncompresed(
    compressed: BigNumberish[],
    y: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "_pubkeyToUncompresed(uint256[2],uint256[2])"(
    compressed: BigNumberish[],
    y: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _signatureToUncompresed(
    compressed: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "_signatureToUncompresed(uint256,uint256)"(
    compressed: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _sqrt(
    xx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  "_sqrt(uint256)"(
    xx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  _sqrtFaster(
    xx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  "_sqrtFaster(uint256)"(
    xx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: boolean;
  }>;

  _verifyMultiple(
    signature: BigNumberish[],
    pubkeys: BigNumberish[][],
    messages: BigNumberish[][],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_verifyMultiple(uint256[2],uint256[4][],uint256[2][])"(
    signature: BigNumberish[],
    pubkeys: BigNumberish[][],
    messages: BigNumberish[][],
    overrides?: CallOverrides
  ): Promise<boolean>;

  _verifySingle(
    signature: BigNumberish[],
    pubkey: BigNumberish[],
    message: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "_verifySingle(uint256[2],uint256[4],uint256[2])"(
    signature: BigNumberish[],
    pubkey: BigNumberish[],
    message: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _expandMsg(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "_expandMsg(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    _hashToField(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_hashToField(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _hashToPoint(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_hashToPoint(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _inverse(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_inverse(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _inverseFaster(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_inverseFaster(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isNonResidueFP(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isNonResidueFP(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isNonResidueFP2(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isNonResidueFP2(uint256[2])"(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isOnCurveG1(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isOnCurveG1(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isOnCurveG1Compressed(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isOnCurveG1Compressed(uint256)"(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isOnCurveG2(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isOnCurveG2(uint256[4])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isOnCurveG2Compressed(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isOnCurveG2Compressed(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isValidCompressedPublicKey(
      compressed: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isValidCompressedPublicKey(uint256[2])"(
      compressed: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isValidCompressedSignature(
      compressed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_isValidCompressedSignature(uint256)"(
      compressed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _mapToPointFT(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_mapToPointFT(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _mapToPointTI(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_mapToPointTI(bytes32)"(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _pubkeyToUncompresed(
      compressed: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_pubkeyToUncompresed(uint256[2],uint256[2])"(
      compressed: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _signatureToUncompresed(
      compressed: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_signatureToUncompresed(uint256,uint256)"(
      compressed: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _sqrt(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "_sqrt(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    _sqrtFaster(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    "_sqrtFaster(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: boolean;
    }>;

    _verifyMultiple(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_verifyMultiple(uint256[2],uint256[4][],uint256[2][])"(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<boolean>;

    _verifySingle(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "_verifySingle(uint256[2],uint256[4],uint256[2])"(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    _expandMsg(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_expandMsg(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hashToField(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_hashToField(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hashToPoint(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_hashToPoint(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _inverse(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_inverse(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _inverseFaster(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_inverseFaster(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isNonResidueFP(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isNonResidueFP(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isNonResidueFP2(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isNonResidueFP2(uint256[2])"(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isOnCurveG1(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isOnCurveG1(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isOnCurveG1Compressed(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isOnCurveG1Compressed(uint256)"(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isOnCurveG2(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isOnCurveG2(uint256[4])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isOnCurveG2Compressed(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isOnCurveG2Compressed(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isValidCompressedPublicKey(
      compressed: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isValidCompressedPublicKey(uint256[2])"(
      compressed: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isValidCompressedSignature(
      compressed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isValidCompressedSignature(uint256)"(
      compressed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _mapToPointFT(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_mapToPointFT(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _mapToPointTI(e: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "_mapToPointTI(bytes32)"(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _pubkeyToUncompresed(
      compressed: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_pubkeyToUncompresed(uint256[2],uint256[2])"(
      compressed: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _signatureToUncompresed(
      compressed: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_signatureToUncompresed(uint256,uint256)"(
      compressed: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _sqrt(xx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_sqrt(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _sqrtFaster(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_sqrtFaster(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyMultiple(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_verifyMultiple(uint256[2],uint256[4][],uint256[2][])"(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifySingle(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_verifySingle(uint256[2],uint256[4],uint256[2])"(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _expandMsg(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_expandMsg(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hashToField(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_hashToField(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hashToPoint(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_hashToPoint(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _inverse(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_inverse(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _inverseFaster(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_inverseFaster(uint256)"(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isNonResidueFP(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isNonResidueFP(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isNonResidueFP2(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isNonResidueFP2(uint256[2])"(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isOnCurveG1(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isOnCurveG1(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isOnCurveG1Compressed(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isOnCurveG1Compressed(uint256)"(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isOnCurveG2(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isOnCurveG2(uint256[4])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isOnCurveG2Compressed(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isOnCurveG2Compressed(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isValidCompressedPublicKey(
      compressed: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isValidCompressedPublicKey(uint256[2])"(
      compressed: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isValidCompressedSignature(
      compressed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_isValidCompressedSignature(uint256)"(
      compressed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _mapToPointFT(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_mapToPointFT(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _mapToPointTI(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_mapToPointTI(bytes32)"(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _pubkeyToUncompresed(
      compressed: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_pubkeyToUncompresed(uint256[2],uint256[2])"(
      compressed: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _signatureToUncompresed(
      compressed: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_signatureToUncompresed(uint256,uint256)"(
      compressed: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _sqrt(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_sqrt(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _sqrtFaster(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_sqrtFaster(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyMultiple(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_verifyMultiple(uint256[2],uint256[4][],uint256[2][])"(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifySingle(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_verifySingle(uint256[2],uint256[4],uint256[2])"(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
