/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GasBlsInterface extends ethers.utils.Interface {
  functions: {
    "_hashToFieldGasCost(bytes,bytes)": FunctionFragment;
    "_hashToPointGasCost(bytes,bytes)": FunctionFragment;
    "_isNonResidueFP2GasCost(uint256[2])": FunctionFragment;
    "_isNonResidueFPGasCost(uint256)": FunctionFragment;
    "_isOnCurveG1CompressedGasCost(uint256)": FunctionFragment;
    "_isOnCurveG1GasCost(uint256[2])": FunctionFragment;
    "_isOnCurveG2CompressedGasCost(uint256[2])": FunctionFragment;
    "_isOnCurveG2GasCost(uint256[4])": FunctionFragment;
    "_mapToPointFTGasCost(uint256)": FunctionFragment;
    "_mapToPointTIGasCost(bytes32)": FunctionFragment;
    "_sqrt(uint256)": FunctionFragment;
    "_sqrtFaster(uint256)": FunctionFragment;
    "_verifyMultipleGasCost(uint256[2],uint256[4][],uint256[2][])": FunctionFragment;
    "_verifySingleGasCost(uint256[2],uint256[4],uint256[2])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_hashToFieldGasCost",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_hashToPointGasCost",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_isNonResidueFP2GasCost",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isNonResidueFPGasCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isOnCurveG1CompressedGasCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isOnCurveG1GasCost",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isOnCurveG2CompressedGasCost",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isOnCurveG2GasCost",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_mapToPointFTGasCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_mapToPointTIGasCost",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "_sqrt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "_sqrtFaster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyMultipleGasCost",
    values: [BigNumberish[], BigNumberish[][], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifySingleGasCost",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "_hashToFieldGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_hashToPointGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isNonResidueFP2GasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isNonResidueFPGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isOnCurveG1CompressedGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isOnCurveG1GasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isOnCurveG2CompressedGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isOnCurveG2GasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_mapToPointFTGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_mapToPointTIGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_sqrt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_sqrtFaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifyMultipleGasCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifySingleGasCost",
    data: BytesLike
  ): Result;

  events: {};
}

export class GasBls extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GasBlsInterface;

  functions: {
    _hashToFieldGasCost(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_hashToFieldGasCost(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _hashToPointGasCost(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_hashToPointGasCost(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _isNonResidueFP2GasCost(
      e: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_isNonResidueFP2GasCost(uint256[2])"(
      e: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _isNonResidueFPGasCost(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_isNonResidueFPGasCost(uint256)"(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _isOnCurveG1CompressedGasCost(
      point: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_isOnCurveG1CompressedGasCost(uint256)"(
      point: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _isOnCurveG1GasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_isOnCurveG1GasCost(uint256[2])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _isOnCurveG2CompressedGasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_isOnCurveG2CompressedGasCost(uint256[2])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _isOnCurveG2GasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_isOnCurveG2GasCost(uint256[4])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _mapToPointFTGasCost(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_mapToPointFTGasCost(uint256)"(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _mapToPointTIGasCost(
      e: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_mapToPointTIGasCost(bytes32)"(
      e: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _sqrt(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      operationGasCost: BigNumber;
      0: BigNumber;
    }>;

    "_sqrt(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      operationGasCost: BigNumber;
      0: BigNumber;
    }>;

    _sqrtFaster(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      operationGasCost: BigNumber;
      0: BigNumber;
    }>;

    "_sqrtFaster(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      operationGasCost: BigNumber;
      0: BigNumber;
    }>;

    _verifyMultipleGasCost(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_verifyMultipleGasCost(uint256[2],uint256[4][],uint256[2][])"(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _verifySingleGasCost(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_verifySingleGasCost(uint256[2],uint256[4],uint256[2])"(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _hashToFieldGasCost(
    domain: BytesLike,
    message: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_hashToFieldGasCost(bytes,bytes)"(
    domain: BytesLike,
    message: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _hashToPointGasCost(
    domain: BytesLike,
    message: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_hashToPointGasCost(bytes,bytes)"(
    domain: BytesLike,
    message: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _isNonResidueFP2GasCost(
    e: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_isNonResidueFP2GasCost(uint256[2])"(
    e: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _isNonResidueFPGasCost(
    e: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_isNonResidueFPGasCost(uint256)"(
    e: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _isOnCurveG1CompressedGasCost(
    point: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_isOnCurveG1CompressedGasCost(uint256)"(
    point: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _isOnCurveG1GasCost(
    point: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_isOnCurveG1GasCost(uint256[2])"(
    point: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _isOnCurveG2CompressedGasCost(
    point: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_isOnCurveG2CompressedGasCost(uint256[2])"(
    point: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _isOnCurveG2GasCost(
    point: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_isOnCurveG2GasCost(uint256[4])"(
    point: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _mapToPointFTGasCost(
    e: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_mapToPointFTGasCost(uint256)"(
    e: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _mapToPointTIGasCost(
    e: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_mapToPointTIGasCost(bytes32)"(
    e: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _sqrt(xx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "_sqrt(uint256)"(
    xx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _sqrtFaster(xx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "_sqrtFaster(uint256)"(
    xx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _verifyMultipleGasCost(
    signature: BigNumberish[],
    pubkeys: BigNumberish[][],
    messages: BigNumberish[][],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_verifyMultipleGasCost(uint256[2],uint256[4][],uint256[2][])"(
    signature: BigNumberish[],
    pubkeys: BigNumberish[][],
    messages: BigNumberish[][],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _verifySingleGasCost(
    signature: BigNumberish[],
    pubkey: BigNumberish[],
    message: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_verifySingleGasCost(uint256[2],uint256[4],uint256[2])"(
    signature: BigNumberish[],
    pubkey: BigNumberish[],
    message: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _hashToFieldGasCost(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_hashToFieldGasCost(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hashToPointGasCost(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_hashToPointGasCost(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isNonResidueFP2GasCost(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isNonResidueFP2GasCost(uint256[2])"(
      e: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isNonResidueFPGasCost(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isNonResidueFPGasCost(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isOnCurveG1CompressedGasCost(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isOnCurveG1CompressedGasCost(uint256)"(
      point: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isOnCurveG1GasCost(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isOnCurveG1GasCost(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isOnCurveG2CompressedGasCost(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isOnCurveG2CompressedGasCost(uint256[2])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isOnCurveG2GasCost(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_isOnCurveG2GasCost(uint256[4])"(
      point: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _mapToPointFTGasCost(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_mapToPointFTGasCost(uint256)"(
      e: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _mapToPointTIGasCost(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_mapToPointTIGasCost(bytes32)"(
      e: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _sqrt(xx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_sqrt(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _sqrtFaster(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_sqrtFaster(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyMultipleGasCost(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_verifyMultipleGasCost(uint256[2],uint256[4][],uint256[2][])"(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifySingleGasCost(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_verifySingleGasCost(uint256[2],uint256[4],uint256[2])"(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _hashToFieldGasCost(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_hashToFieldGasCost(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _hashToPointGasCost(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_hashToPointGasCost(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _isNonResidueFP2GasCost(
      e: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_isNonResidueFP2GasCost(uint256[2])"(
      e: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    _isNonResidueFPGasCost(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_isNonResidueFPGasCost(uint256)"(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _isOnCurveG1CompressedGasCost(
      point: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_isOnCurveG1CompressedGasCost(uint256)"(
      point: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _isOnCurveG1GasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_isOnCurveG1GasCost(uint256[2])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    _isOnCurveG2CompressedGasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_isOnCurveG2CompressedGasCost(uint256[2])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    _isOnCurveG2GasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_isOnCurveG2GasCost(uint256[4])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    _mapToPointFTGasCost(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_mapToPointFTGasCost(uint256)"(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _mapToPointTIGasCost(
      e: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_mapToPointTIGasCost(bytes32)"(
      e: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _sqrt(xx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "_sqrt(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _sqrtFaster(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_sqrtFaster(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyMultipleGasCost(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_verifyMultipleGasCost(uint256[2],uint256[4][],uint256[2][])"(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: Overrides
    ): Promise<BigNumber>;

    _verifySingleGasCost(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_verifySingleGasCost(uint256[2],uint256[4],uint256[2])"(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _hashToFieldGasCost(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_hashToFieldGasCost(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _hashToPointGasCost(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_hashToPointGasCost(bytes,bytes)"(
      domain: BytesLike,
      message: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _isNonResidueFP2GasCost(
      e: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_isNonResidueFP2GasCost(uint256[2])"(
      e: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _isNonResidueFPGasCost(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_isNonResidueFPGasCost(uint256)"(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _isOnCurveG1CompressedGasCost(
      point: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_isOnCurveG1CompressedGasCost(uint256)"(
      point: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _isOnCurveG1GasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_isOnCurveG1GasCost(uint256[2])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _isOnCurveG2CompressedGasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_isOnCurveG2CompressedGasCost(uint256[2])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _isOnCurveG2GasCost(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_isOnCurveG2GasCost(uint256[4])"(
      point: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _mapToPointFTGasCost(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_mapToPointFTGasCost(uint256)"(
      e: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _mapToPointTIGasCost(
      e: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_mapToPointTIGasCost(bytes32)"(
      e: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _sqrt(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_sqrt(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _sqrtFaster(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_sqrtFaster(uint256)"(
      xx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyMultipleGasCost(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_verifyMultipleGasCost(uint256[2],uint256[4][],uint256[2][])"(
      signature: BigNumberish[],
      pubkeys: BigNumberish[][],
      messages: BigNumberish[][],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _verifySingleGasCost(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_verifySingleGasCost(uint256[2],uint256[4],uint256[2])"(
      signature: BigNumberish[],
      pubkey: BigNumberish[],
      message: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
